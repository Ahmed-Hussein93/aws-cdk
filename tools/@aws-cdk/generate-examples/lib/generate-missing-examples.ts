import { TypeSystem } from 'jsii-reflect';
import { RosettaDiagnostic, TargetLanguage, TranslatedSnippet, Translator, typeScriptSnippetFromSource } from 'jsii-rosetta';

import { generateClassAssignment } from './generate';

export async function generateMissingExamples(assemblyLocations: string[]) {
  // Set up translation tools
  const translator = new Translator(false);
  const translatedSnippets = new Array<TranslatedSnippet>();
  const failures = new Array<RosettaDiagnostic>();

  const fileName = '.hi';
  for (const assemblyLocation of assemblyLocations) {
    const typesystem = new TypeSystem();
    await typesystem.load(assemblyLocation);

    for (const classType of typesystem.classes) {
      const example = generateClassAssignment(classType);
      if (example) {
        // eslint-disable-next-line no-console
        //console.log('// This example was autogenerated. You will have to change the values.');
        // eslint-disable-next-line no-console
        //console.log(example);
        const tsSnippet = typeScriptSnippetFromSource(example, fileName, false);
        try {
          translatedSnippets.push(translator.translate(tsSnippet));
        } catch (e) {
          failures.push(
            makeRosettaDiagnostic(true, `rosetta: error translating snippet: ${e}\n${e.stack}\n${tsSnippet.completeSource}`),
          );
        }
      }
    }
  }

  for (const snippet of translatedSnippets) {
    // eslint-disable-next-line no-console
    console.log(snippet.get(TargetLanguage.PYTHON)?.source);
  }
}

function makeRosettaDiagnostic(isError: boolean, formattedMessage: string): RosettaDiagnostic {
  return { isError, formattedMessage, isFromStrictAssembly: false };
}