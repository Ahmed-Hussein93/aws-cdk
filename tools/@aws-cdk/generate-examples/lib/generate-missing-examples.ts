import { Assembly, TypeSystem } from 'jsii-reflect';

import { insertExample, replaceAssembly } from './assemblies';
import { generateClassAssignment } from './generate';

const COMMENT_WARNING = '// this example was autogenerated. you will have to change the values.\n';

export async function generateMissingExamples(assemblyLocations: string[]) {
  const typesystem = new TypeSystem();
  const assemblies: Assembly[] = [];
  // load all assemblies into typesystem
  for (const assemblyLocation of assemblyLocations) {
    assemblies.push(await typesystem.load(assemblyLocation));
  }
  // generate examples for all eligible types that have no doc examples yet
  for (const classType of typesystem.classes) {
    if (classType.spec.docs?.example) {
      continue;
    }
    const example = generateClassAssignment(classType);
    if (example) {
      insertExample(COMMENT_WARNING + example, classType.spec);
    }
  }
  // update all assemblies
  for (let i = 0; i < assemblies.length; i++) {
    await replaceAssembly(assemblies[i].spec, assemblyLocations[i]);
  }
}

